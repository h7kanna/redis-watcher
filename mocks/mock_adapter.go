// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/casbin/casbin/v2/persist (interfaces: BatchAdapter,UpdatableAdapter)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "github.com/casbin/casbin/v2/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBatchAdapter is a mock of BatchAdapter interface
type MockBatchAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockBatchAdapterMockRecorder
}

// MockBatchAdapterMockRecorder is the mock recorder for MockBatchAdapter
type MockBatchAdapterMockRecorder struct {
	mock *MockBatchAdapter
}

// NewMockBatchAdapter creates a new mock instance
func NewMockBatchAdapter(ctrl *gomock.Controller) *MockBatchAdapter {
	mock := &MockBatchAdapter{ctrl: ctrl}
	mock.recorder = &MockBatchAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBatchAdapter) EXPECT() *MockBatchAdapterMockRecorder {
	return m.recorder
}

// AddPolicies mocks base method
func (m *MockBatchAdapter) AddPolicies(arg0, arg1 string, arg2 [][]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPolicies", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPolicies indicates an expected call of AddPolicies
func (mr *MockBatchAdapterMockRecorder) AddPolicies(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPolicies", reflect.TypeOf((*MockBatchAdapter)(nil).AddPolicies), arg0, arg1, arg2)
}

// AddPolicy mocks base method
func (m *MockBatchAdapter) AddPolicy(arg0, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPolicy indicates an expected call of AddPolicy
func (mr *MockBatchAdapterMockRecorder) AddPolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPolicy", reflect.TypeOf((*MockBatchAdapter)(nil).AddPolicy), arg0, arg1, arg2)
}

// LoadPolicy mocks base method
func (m *MockBatchAdapter) LoadPolicy(arg0 model.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPolicy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadPolicy indicates an expected call of LoadPolicy
func (mr *MockBatchAdapterMockRecorder) LoadPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPolicy", reflect.TypeOf((*MockBatchAdapter)(nil).LoadPolicy), arg0)
}

// RemoveFilteredPolicy mocks base method
func (m *MockBatchAdapter) RemoveFilteredPolicy(arg0, arg1 string, arg2 int, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFilteredPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFilteredPolicy indicates an expected call of RemoveFilteredPolicy
func (mr *MockBatchAdapterMockRecorder) RemoveFilteredPolicy(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilteredPolicy", reflect.TypeOf((*MockBatchAdapter)(nil).RemoveFilteredPolicy), varargs...)
}

// RemovePolicies mocks base method
func (m *MockBatchAdapter) RemovePolicies(arg0, arg1 string, arg2 [][]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePolicies", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePolicies indicates an expected call of RemovePolicies
func (mr *MockBatchAdapterMockRecorder) RemovePolicies(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePolicies", reflect.TypeOf((*MockBatchAdapter)(nil).RemovePolicies), arg0, arg1, arg2)
}

// RemovePolicy mocks base method
func (m *MockBatchAdapter) RemovePolicy(arg0, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePolicy indicates an expected call of RemovePolicy
func (mr *MockBatchAdapterMockRecorder) RemovePolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePolicy", reflect.TypeOf((*MockBatchAdapter)(nil).RemovePolicy), arg0, arg1, arg2)
}

// SavePolicy mocks base method
func (m *MockBatchAdapter) SavePolicy(arg0 model.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePolicy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePolicy indicates an expected call of SavePolicy
func (mr *MockBatchAdapterMockRecorder) SavePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePolicy", reflect.TypeOf((*MockBatchAdapter)(nil).SavePolicy), arg0)
}

// MockUpdatableAdapter is a mock of UpdatableAdapter interface
type MockUpdatableAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockUpdatableAdapterMockRecorder
}

// MockUpdatableAdapterMockRecorder is the mock recorder for MockUpdatableAdapter
type MockUpdatableAdapterMockRecorder struct {
	mock *MockUpdatableAdapter
}

// NewMockUpdatableAdapter creates a new mock instance
func NewMockUpdatableAdapter(ctrl *gomock.Controller) *MockUpdatableAdapter {
	mock := &MockUpdatableAdapter{ctrl: ctrl}
	mock.recorder = &MockUpdatableAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdatableAdapter) EXPECT() *MockUpdatableAdapterMockRecorder {
	return m.recorder
}

// AddPolicy mocks base method
func (m *MockUpdatableAdapter) AddPolicy(arg0, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPolicy indicates an expected call of AddPolicy
func (mr *MockUpdatableAdapterMockRecorder) AddPolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPolicy", reflect.TypeOf((*MockUpdatableAdapter)(nil).AddPolicy), arg0, arg1, arg2)
}

// LoadPolicy mocks base method
func (m *MockUpdatableAdapter) LoadPolicy(arg0 model.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPolicy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadPolicy indicates an expected call of LoadPolicy
func (mr *MockUpdatableAdapterMockRecorder) LoadPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPolicy", reflect.TypeOf((*MockUpdatableAdapter)(nil).LoadPolicy), arg0)
}

// RemoveFilteredPolicy mocks base method
func (m *MockUpdatableAdapter) RemoveFilteredPolicy(arg0, arg1 string, arg2 int, arg3 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFilteredPolicy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFilteredPolicy indicates an expected call of RemoveFilteredPolicy
func (mr *MockUpdatableAdapterMockRecorder) RemoveFilteredPolicy(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFilteredPolicy", reflect.TypeOf((*MockUpdatableAdapter)(nil).RemoveFilteredPolicy), varargs...)
}

// RemovePolicy mocks base method
func (m *MockUpdatableAdapter) RemovePolicy(arg0, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePolicy indicates an expected call of RemovePolicy
func (mr *MockUpdatableAdapterMockRecorder) RemovePolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePolicy", reflect.TypeOf((*MockUpdatableAdapter)(nil).RemovePolicy), arg0, arg1, arg2)
}

// SavePolicy mocks base method
func (m *MockUpdatableAdapter) SavePolicy(arg0 model.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePolicy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePolicy indicates an expected call of SavePolicy
func (mr *MockUpdatableAdapterMockRecorder) SavePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePolicy", reflect.TypeOf((*MockUpdatableAdapter)(nil).SavePolicy), arg0)
}

// UpdateFilteredPolicies mocks base method
func (m *MockUpdatableAdapter) UpdateFilteredPolicies(arg0, arg1 string, arg2 [][]string, arg3 int, arg4 ...string) ([][]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFilteredPolicies", varargs...)
	ret0, _ := ret[0].([][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFilteredPolicies indicates an expected call of UpdateFilteredPolicies
func (mr *MockUpdatableAdapterMockRecorder) UpdateFilteredPolicies(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilteredPolicies", reflect.TypeOf((*MockUpdatableAdapter)(nil).UpdateFilteredPolicies), varargs...)
}

// UpdatePolicies mocks base method
func (m *MockUpdatableAdapter) UpdatePolicies(arg0, arg1 string, arg2, arg3 [][]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicies", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePolicies indicates an expected call of UpdatePolicies
func (mr *MockUpdatableAdapterMockRecorder) UpdatePolicies(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicies", reflect.TypeOf((*MockUpdatableAdapter)(nil).UpdatePolicies), arg0, arg1, arg2, arg3)
}

// UpdatePolicy mocks base method
func (m *MockUpdatableAdapter) UpdatePolicy(arg0, arg1 string, arg2, arg3 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicy", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePolicy indicates an expected call of UpdatePolicy
func (mr *MockUpdatableAdapterMockRecorder) UpdatePolicy(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockUpdatableAdapter)(nil).UpdatePolicy), arg0, arg1, arg2, arg3)
}
